import{loadF32Lines as e}from"../../util.js";(t=>{let n=[],r=function(e){n.push(e.data)};t.addEventListener("message",r),WebAssembly.instantiateStreaming(fetch("/res/dfrt_v1.wasm")).then(e=>e.instance.exports).then(s=>{let u=null,l=null,i=n=>{let r={err:null},i=null,f=n.linesPath,a=n.res;(i=(i=f!=u?e(f).then(e=>{let t=e.length/4;s.setNumInputLines(t)?(new Float32Array(s.memory.buffer,s.getInputLinesBuffer(),e.length).set(e),s.prepareLines(),u=f,l=e):(r.err="Unable to set input lines ("+f+")",u=null,l=null)}):Promise.resolve()).then(()=>{if(null!=r.err)return;let e=performance.now();if(!s.render(a)){r.err="Unable to render lines at "+a+"x"+a;return}r.time=performance.now()-e;let t=new Uint32Array(s.memory.buffer,s.getOutputDfTexture(),a*a),n=new Float32Array(s.memory.buffer,s.getOutputLinesBuffer(),4*s.getOutputLinesBufferCount());r.res=a,r.df=t,r.linesBuffer=n,r.lines=l})).then(()=>{t.postMessage(r)})};t.addEventListener("message",function(e){i(e.data)}),t.removeEventListener("message",r),n.forEach(i)})})(self);
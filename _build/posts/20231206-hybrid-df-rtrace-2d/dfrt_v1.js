import{AsyncBarrier as e,loadCommonShaderSource as t}from"../../util.js";import{createShader as r,createGraphicsProgram as T,getUniformLocation as E,deleteShaders as R}from"../../webgl_util.js";export const DfrtV1=(()=>{function i(e){return fetch("./shaders/compiled/"+e).then(e=>e.text())}let n=new e().enqueue(t("draw_full_screen_uvs.vert"),"DRAW_FULL_SCREEN_UVS_VERT_SRC").enqueue(t("const_col.frag"),"CONST_COL_FRAG_SRC"),a=new e().enqueue(n.selfBarrier(),null,["DRAW_FULL_SCREEN_UVS_VERT_SRC","CONST_COL_FRAG_SRC"]).enqueue(t("draw_col.frag"),"V1_DRAW_BVH_FRAG_SRC").enqueue(i("dfrt_v1_tracing_test_composite.frag"),"V1_TRACING_TEST_COMPOSITE_FRAG_SRC").enqueue(i("dfrt_v1_tracing_test_num_intersections.frag"),"V1_TRACING_TEST_NUM_INTERSECTIONS_FRAG_SRC").enqueue(i("dfrt_v1_tracing_test_num_iterations.frag"),"V1_TRACING_TEST_NUM_ITERATIONS_FRAG_SRC").enqueue(i("dfrt_v1_tracing_test_visibility.frag"),"V1_TRACING_TEST_VISIBILITY_FRAG_SRC").enqueue(i("dfrt_v1_tracing_test_pointlight.frag"),"V1_TRACING_TEST_POINTLIGHT_FRAG_SRC").enqueue(i("dfrt_v1_vis_df_dist.frag"),"V1_VIS_DF_DIST_FRAG_SRC").enqueue(i("dfrt_v1_vis_df_numlines.frag"),"V1_VIS_DF_NUMLINES_FRAG_SRC").enqueue(i("dfrt_v1_vis_df_composite.frag"),"V1_VIS_DF_COMPOSITE_FRAG_SRC").enqueue(i("draw_lines.vert"),"DRAW_LINES_VERT_SRC");class s{constructor(e){let t=e.getContext("webgl2",{alpha:!1,depth:!1,stencil:!1});if(this.canvas=e,this.valid=t,this.redraw=()=>{},!this.valid)return;this.drawLines=!0,this.dfRes=128,this.visMode=0,this.linesPath="/res/lines.f32";let i=new Worker("dfrt_v1_worker.js",{type:"module"}),n=this,s=null,u=(e,r,T,E)=>{null!=s&&(t.deleteTexture(s.lines),t.deleteTexture(s.linesBuffer),t.deleteTexture(s.dfTexture),s=null);let R=t.createTexture();t.bindTexture(t.TEXTURE_2D,R),t.texImage2D(t.TEXTURE_2D,0,t.RGBA32F,E.length/4,1,0,t.RGBA,t.FLOAT,E),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.NEAREST);let i=t.createTexture();t.bindTexture(t.TEXTURE_2D,i),t.texImage2D(t.TEXTURE_2D,0,t.RGBA32F,T.length/4,1,0,t.RGBA,t.FLOAT,T),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.NEAREST);let a=t.createTexture();t.bindTexture(t.TEXTURE_2D,a),t.texImage2D(t.TEXTURE_2D,0,t.R32UI,e,e,0,t.RED_INTEGER,t.UNSIGNED_INT,r),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.NEAREST),s={dfTexture:a,linesBuffer:i,lines:R,numInputLines:E.length/4,params:[e,0,0,0]},n.redraw()};u(1,new Uint32Array([4278190335]),new Float32Array([0,0,0,0]),new Float32Array([0,0,0,0])),i.addEventListener("message",function(e){let t=e.data;if(null!=t.err){var r="Failed to render data!";throw console.log(r),alert(r),Error(r)}console.log(`Time taken: ${t.time}ms`),u(t.res,t.df,t.linesBuffer,t.lines)}),this.updateDFRTState=()=>{i.postMessage({res:n.dfRes,linesPath:n.linesPath})},this.updateDFRTState(),this.resourceLoaded=a.then(()=>{let i=r(t,a.DRAW_FULL_SCREEN_UVS_VERT_SRC,t.VERTEX_SHADER),u=r(t,a.V1_TRACING_TEST_COMPOSITE_FRAG_SRC,t.FRAGMENT_SHADER),l=r(t,a.V1_TRACING_TEST_NUM_INTERSECTIONS_FRAG_SRC,t.FRAGMENT_SHADER),d=r(t,a.V1_TRACING_TEST_NUM_ITERATIONS_FRAG_SRC,t.FRAGMENT_SHADER),S=r(t,a.V1_TRACING_TEST_VISIBILITY_FRAG_SRC,t.FRAGMENT_SHADER),A=r(t,a.V1_TRACING_TEST_POINTLIGHT_FRAG_SRC,t.FRAGMENT_SHADER),o=r(t,a.DRAW_LINES_VERT_SRC,t.VERTEX_SHADER),f=r(t,a.V1_VIS_DF_DIST_FRAG_SRC,t.FRAGMENT_SHADER),_=r(t,a.V1_VIS_DF_NUMLINES_FRAG_SRC,t.FRAGMENT_SHADER),c=r(t,a.V1_VIS_DF_COMPOSITE_FRAG_SRC,t.FRAGMENT_SHADER),D=r(t,a.CONST_COL_FRAG_SRC,t.FRAGMENT_SHADER),v=T(t,i,u),C=T(t,i,l),I=T(t,i,d),m=T(t,i,S),U=T(t,i,A),N=T(t,i,f),G=T(t,i,_),h=T(t,i,c),F=T(t,o,D);[v,C,I,m,U].forEach(e=>{e.loc={targetUV:E(t,e,"targetUV"),v1HybridParams:E(t,e,"v1HybridParams"),v1DfTexture:E(t,e,"v1DfTexture"),v1LinesBuffer:E(t,e,"v1LinesBuffer")}}),[N,G,h].forEach(e=>{e.loc={v1HybridParams:E(t,e,"v1HybridParams"),v1DfTexture:E(t,e,"v1DfTexture")}}),F.loc={lines:E(t,F,"lines"),constCol:E(t,F,"constCol")},R(t,i,u,l,d,S,A,f,_,c,o,D);let L=()=>{t.bindFramebuffer(t.FRAMEBUFFER,null),t.drawBuffers([t.BACK]),t.viewport(0,0,e.width,e.height)},g=()=>{(e.width!==e.clientWidth||e.height!==e.clientHeight)&&(e.width=e.clientWidth,e.height=e.clientHeight,L())},x=()=>{g();{let e=null;switch(n.visMode){case 0:e=U;break;case 1:e=m;break;case 2:e=C;break;case 3:e=I;break;case 4:e=v;break;case 5:e=N;break;case 6:e=G;break;default:e=h}t.useProgram(e),t.activeTexture(t.TEXTURE0),t.bindTexture(t.TEXTURE_2D,s.dfTexture),t.uniform1i(e.loc.v1DfTexture,0),e.loc.v1LinesBuffer&&(t.activeTexture(t.TEXTURE1),t.bindTexture(t.TEXTURE_2D,s.linesBuffer),t.uniform1i(e.loc.v1LinesBuffer,1)),e.loc.targetUV&&t.uniform2f(e.loc.targetUV,n.visTargetUV[0],n.visTargetUV[1]),t.uniform4f(e.loc.v1HybridParams,s.params[0],s.params[1],s.params[2],s.params[3]),t.drawArrays(t.TRIANGLES,0,3)}n.drawLines&&(t.useProgram(F),t.activeTexture(t.TEXTURE0),t.bindTexture(t.TEXTURE_2D,s.lines),t.uniform1i(F.loc.lines,0),t.uniform4f(F.loc.constCol,1,1,1,1),t.drawArrays(t.LINES,0,2*s.numInputLines))};e.width=e.clientWidth,e.height=e.clientHeight,n.visTargetUV=[.4,.6],L(),x();let $=(t,r)=>{t.preventDefault();let T=e.getBoundingClientRect(),E=r?[t.touches[0].clientX,t.touches[0].clientY]:[t.clientX,t.clientY],R=[(E[0]-T.x)/T.width,1-(E[1]-T.y)/T.height];n.visTargetUV=R,x()},V=t=>{if("mousedown"==t.type){let r=e=>{$(e,!1)},T=t=>{t.preventDefault(),e.removeEventListener("mousemove",r,!1),e.removeEventListener("mouseup",T,!1)};e.addEventListener("mousemove",r,!1),e.addEventListener("mouseup",T,!1),r(t)}else{let E=e=>{$(e,!0)},R=t=>{t.preventDefault(),e.removeEventListener("touchmove",E,!1),e.removeEventListener("touchend",R,!1)};e.addEventListener("touchmove",E,!1),e.addEventListener("touchend",R,!1),E(t)}};e.addEventListener("mousedown",V,!1),e.addEventListener("touchstart",V,!1),n.redraw=x})}}function u(e){return void 0==e.drawCtx&&(e.drawCtx=new s(e)),e.drawCtx}return{bindDFRTV1Context:u}})();
export function createShader(e,r,t){if(!e)return null;let a=e.createShader(t);if(e.shaderSource(a,r,0),e.compileShader(a),!e.getShaderParameter(a,e.COMPILE_STATUS)){let o=e.getShaderInfoLog(a);var n=`Failed to compile shader (type: ${t}):
${o}.`;throw console.log(n),alert(n),Error(n)}return a}export function createGraphicsProgram(e,r,t=null){if(!e)return null;let a=e.createProgram();if(e.attachShader(a,r),null==t&&(void 0==e.dummyFragmentShader&&(e.dummyFragmentShader=createShader(e,"#version 300 es\nvoid main(){}",e.FRAGMENT_SHADER)),t=e.dummyFragmentShader),e.attachShader(a,t),e.linkProgram(a),!e.getProgramParameter(a,e.LINK_STATUS)){let o=e.getProgramInfoLog(a);var n=`Failed to link graphics program:
${o}.`;throw console.log(n),alert(n),Error(n)}return e.detachShader(a,r),e.detachShader(a,t),a}export function getUniformLocation(e,r,t){return e?e.getUniformLocation(r,t):null}export function createDummyVAO(e){return e?e.createVertexArray():null}export function deleteShaders(e,...r){if(e)for(let t of r)t&&e.deleteShader(t)}